/* information code


*/

#include "main.h"
#include "AT.h"
#include "uart.h"
#include "system.h"
#include "gpio.h"

UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

void MX_UART4_Init(void);
void MX_USART1_UART_Init(void);
void MX_USART3_UART_Init(void);
void cutString( void *data, const char source[], const char startString[], const char finalString[]);

void UART1_PrintData(char data[]);
char dataReceived[100];

void UART3_getData(char UART3_Rx[], int Number_String_Allow_Get_Data);

int  UART1_CouterData=0, UART3_CouterData=0, allowGetData =0;;
uint8_t UART3_Rx, UART1_Rx;
char UART3_RxDataBuffer[200];
char UART1_RxDataBuffer[100]; 
char UART3_RxData[200]; 
char UART1_RxData[100];

const int TEN_SECOND = 10;
int a=10;

int main(void)
{
	HAL_Init();
	SystemClock_Config();
	MX_GPIO_Init();
	MX_UART4_Init();
	MX_USART1_UART_Init();
	MX_USART3_UART_Init();

  HAL_UART_Receive_IT(&huart1, &UART1_Rx, 1);
  HAL_UART_Receive_IT(&huart3, &UART3_Rx, 1);

  wait_Enable_Sim(TEN_SECOND);
	while (1)	
	{
    UART1_PrintData(UART1_RxData);

	}
}

char ATsend[100];
char ATcompare[100];
char ATfinal[100];


// void UART3_getData(){
//   memcpy(ATsend, AT_CheckList[AT_CheckSim].send.data,100);
//   memcpy(ATcompare, AT_CheckList[AT_CheckSim].compare.data,100);
//   memcpy(ATfinal, AT_CheckList[AT_CheckSim].final.data,100);
//   allowGetData =1;
//   HAL_UART_Transmit(&huart3, (uint8_t *) &ATsend, strlen(ATsend), 200);
//   if(strlen(strstr(UART3_RxDataBuffer, ATcompare)) !=0 ){
//     cutString(UART3_RxData, UART3_RxDataBuffer, ATcompare, ATfinal);
//     memset(UART3_RxDataBuffer,0x00,200);
//   }
// }

int UART3_Couter_Data_Interruption=0;
/**
  * @brief Get string data from UART3 and send received data to UART1
  * @param  List Argument
  * @param  Argument 1: Data receive from function interrupt  (UART1_RxData)
  * @param  Argument 2: Allow to get data after "number_allow" characters \r\n  
  * @retval Data after "number_allow" characters \r\n 
  * @retval Variable saved: UART3_RxData  
  */
void UART3_getData(char UART3_Rx[], int Number_String_Allow_Get_Data){
  if(Number_String_Allow_Get_Data != 0){
    if(UART3_Rx[strlen(UART3_Rx)-2]==13 && UART3_Rx[strlen(UART3_Rx)-1]==10){
		  ++UART3_Couter_Data_Interruption;
      memcpy(UART3_RxData, UART3_Rx, strlen(UART3_Rx));
      if(UART3_Couter_Data_Interruption >= Number_String_Allow_Get_Data){
        memset(UART3_RxData, 0x00,100);
		    memset(UART3_RxDataBuffer, 0x00,100);
        UART3_Couter_Data_Interruption=0;
      }
	  }
  }
}


char UART3_Rx_Data[200],UART3_Rx_Data_buffer[200];
/**
  * @brief trim string based on start and end string
  * @param data - data received after cutting
  * @param source - pass to the original string
  * @param startString - string starts to get data
  * @param finalString - terminating string receiving data
  * @retval None  
  */
void cutString( void *data, const char source[], const char startString[], const char finalString[]){
   char *pdata = (char *)data;
   int maxLength = 200;
   char *subStart, *subFinal, getStart[maxLength], getFinal[maxLength];

   subStart = strstr(source, startString);
   memcpy(getStart, subStart ,maxLength);
   subFinal = strstr(getStart, finalString);
   memcpy(getFinal, subFinal ,maxLength);

   if(strlen(getStart)!=0 && strlen(getFinal) !=0){
      for(int i=0; i< strlen(getStart); i++){
         if(strcmp(&getStart[i-2], &getFinal[0]) ==0 && strcmp(&getStart[i-1], &getFinal[1]) ==0 ){
            break;
         }
         else{
            pdata[strlen(pdata)] = getStart[i];
         }
      }
   }
}

void UART1_PrintData(char data[]){
  if(strcmp(data, dataReceived)!=0)
  {
    memcpy(dataReceived, data, 100);
    HAL_UART_Transmit(&huart1,(uint8_t *) &dataReceived, strlen(dataReceived), 200);
    //HAL_UART_Transmit(&huart3,(uint8_t *) &dataReceived, strlen(dataReceived), 200);
  }
}

/**
  * @brief Interrupt Receive data from UARTx
  * @param 
  * @retval Variable saved: UART1_RxData, UART3_RxData  
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == huart1.Instance)
  {
    HAL_UART_Receive_IT(&huart1, &UART1_Rx, 1);
    UART1_RxDataBuffer[strlen(UART1_RxDataBuffer)] = UART1_Rx;
    if(UART1_RxDataBuffer[strlen(UART1_RxDataBuffer)-2]==13 && UART1_RxDataBuffer[strlen(UART1_RxDataBuffer)-1]==10)
    {
      memcpy(UART1_RxData, UART1_RxDataBuffer, 100);
      memset(UART1_RxDataBuffer, 0x00,100);
    }
	}

	if(huart->Instance == huart3.Instance)
  {
    HAL_UART_Receive_IT(&huart1, &UART3_Rx, 1);
    UART3_RxDataBuffer[strlen(UART3_RxDataBuffer)] = UART3_Rx;
    UART3_getData(UART3_RxDataBuffer,10);
	}
  
}


/**
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART4_Init(void)
{

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
  huart4.Init.BaudRate = 115200;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */
    
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */
    
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}



















/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler()
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
